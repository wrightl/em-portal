@page "/weather"
@attribute [Authorize]
@attribute [StreamRendering]
@using EmPortal.Client.Repos;
@using System.Security.Principal;
@inject ReposService _reposService;

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>Hello @User.Name!</p>
<p>@User.ToString()!</p>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Repos.WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null){
            var state = await authenticationState;
            User = state?.User?.Identity;
        }

        forecasts = await _reposService.GetReposAsync();
    }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState {get;set;}

    private IIdentity User = default(IIdentity);

@* 
    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    } *@
}
